package com.shenjianli.fly.app.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.shenjianli.fly.model.LocationEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOCATION_ENTITY".
*/
public class LocationEntityDao extends AbstractDao<LocationEntity, Long> {

    public static final String TABLENAME = "LOCATION_ENTITY";

    /**
     * Properties of entity LocationEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Log = new Property(1, Double.class, "log", false, "sign_log");
        public final static Property Lat = new Property(2, Double.class, "lat", false, "sign_lat");
        public final static Property Address = new Property(3, String.class, "address", false, "sign_address");
        public final static Property Province = new Property(4, String.class, "province", false, "sign_province");
        public final static Property City = new Property(5, String.class, "city", false, "sign_city");
        public final static Property District = new Property(6, String.class, "district", false, "sign_district");
        public final static Property Street = new Property(7, String.class, "street", false, "sign_street");
        public final static Property Info = new Property(8, String.class, "info", false, "sign_info");
    }


    public LocationEntityDao(DaoConfig config) {
        super(config);
    }
    
    public LocationEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOCATION_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"sign_log\" REAL," + // 1: log
                "\"sign_lat\" REAL," + // 2: lat
                "\"sign_address\" TEXT," + // 3: address
                "\"sign_province\" TEXT," + // 4: province
                "\"sign_city\" TEXT," + // 5: city
                "\"sign_district\" TEXT," + // 6: district
                "\"sign_street\" TEXT," + // 7: street
                "\"sign_info\" TEXT);"); // 8: info
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOCATION_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LocationEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Double log = entity.getLog();
        if (log != null) {
            stmt.bindDouble(2, log);
        }
 
        Double lat = entity.getLat();
        if (lat != null) {
            stmt.bindDouble(3, lat);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(4, address);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(5, province);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(6, city);
        }
 
        String district = entity.getDistrict();
        if (district != null) {
            stmt.bindString(7, district);
        }
 
        String street = entity.getStreet();
        if (street != null) {
            stmt.bindString(8, street);
        }
 
        String info = entity.getInfo();
        if (info != null) {
            stmt.bindString(9, info);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LocationEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Double log = entity.getLog();
        if (log != null) {
            stmt.bindDouble(2, log);
        }
 
        Double lat = entity.getLat();
        if (lat != null) {
            stmt.bindDouble(3, lat);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(4, address);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(5, province);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(6, city);
        }
 
        String district = entity.getDistrict();
        if (district != null) {
            stmt.bindString(7, district);
        }
 
        String street = entity.getStreet();
        if (street != null) {
            stmt.bindString(8, street);
        }
 
        String info = entity.getInfo();
        if (info != null) {
            stmt.bindString(9, info);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LocationEntity readEntity(Cursor cursor, int offset) {
        LocationEntity entity = new LocationEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1), // log
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // lat
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // address
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // province
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // city
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // district
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // street
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // info
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LocationEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLog(cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1));
        entity.setLat(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setAddress(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setProvince(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCity(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDistrict(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStreet(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setInfo(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LocationEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LocationEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LocationEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
